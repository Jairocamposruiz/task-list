{"version":3,"sources":["static/image.svg","context/todoContext.tsx","hooks/useLocalStorage.ts","hooks/useTodoContext.ts","components/CreateTodoButton.tsx","components/TodoCounter.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoSearch.tsx","components/CreateTodoInput.tsx","Modal/index.tsx","App/AppUI.tsx","App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoContext","createContext","TodoProvider","props","itemName","initialState","parsedItems","localStorageItem","localStorage","getItem","JSON","parse","setItem","stringify","useState","items","setItems","newItems","stringifiedItems","useLocalStorage","todos","saveTodos","searchValue","setSearchValue","filterComplete","setFilterComplete","createTodoValue","setTodoValue","completedTodos","filter","todo","completed","length","totalTodos","todosFiltered","text","toLowerCase","includes","openModal","setOpenModal","todoForDelete","setTodoForDelete","context","addTodo","newTodos","newTodo","push","toogleFilterComplete","completeTodos","todoIndex","findIndex","toogleComplete","deleteTodos","splice","verificationDelete","Provider","value","children","useTodoContext","todoContext","useContext","Error","CreateTodoButton","onClick","className","TodoCounter","TodoItem","item","onComplete","onDelete","TodoList","map","TodoSearch","onChange","event","target","placeholder","CreateTodoInput","Modal","modalRoot","document","getElementById","ReactDOM","createPortal","AppUI","alt","src","taskImage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.934a7ed6.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/image.ea7dd990.svg\";","import { createContext, ReactNode, useState } from \"react\";\nimport { useLocalStorage } from \"../hooks/useLocalStorage\";\n\nexport type TodoContextInterface = {\n  createTodoValue: string;\n  setTodoValue: React.Dispatch<React.SetStateAction<string>>;\n  addTodo: () => void;\n  completedTodos: number;\n  totalTodos: number;\n  searchValue: string;\n  setSearchValue: React.Dispatch<React.SetStateAction<string>>;\n  toogleFilterComplete: () => void;\n  filterComplete: boolean;\n  todosFiltered: Todo[];\n  completeTodos: (text: string) => void;\n  deleteTodos: () => void;\n  openModal: boolean;\n  setOpenModal: React.Dispatch<React.SetStateAction<boolean>>;\n  verificationDelete: (text: string) => void;\n  todoForDelete: string;\n}\n\nconst TodoContext = createContext<TodoContextInterface | null>(null);\n\ntype TodoProviderProps = {\n  children: ReactNode\n}\n\nexport type Todo = { text: string; completed: boolean };\n\nfunction TodoProvider(props: TodoProviderProps) {\n\n  const [todos, saveTodos] = useLocalStorage<Todo[]>(\"TODOS_V1\", []);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [filterComplete, setFilterComplete] = useState(false);\n  const [createTodoValue, setTodoValue] = useState(\"\");\n\n  const completedTodos = todos.filter((todo) => todo.completed === true).length;\n  const totalTodos = todos.length;\n\n  const toogleFilterComplete = () => {\n    setFilterComplete(!filterComplete);\n  };\n\n  const filter = () => {\n    if (filterComplete) {\n      const todosFilter = todos.filter((todo) => todo.completed === false);\n      return todosFilter.filter((todo) =>\n        todo.text.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    } else {\n      return todos.filter((todo) =>\n        todo.text.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    }\n  };\n\n  const todosFiltered = filter();\n\n  const completeTodos = (text: string) => {\n    const todoIndex = todos.findIndex((todo) => todo.text === text);\n    const newTodos = [...todos];\n    const toogleComplete = !newTodos[todoIndex].completed;\n    newTodos[todoIndex] = {\n      ...todos[todoIndex],\n      completed: toogleComplete,\n    };\n    saveTodos(newTodos);\n  };\n\n  const deleteTodos = () => {\n    const todoIndex = todos.findIndex((todo) => todo.text === todoForDelete);\n    \n    if (todoIndex < 0) return;\n    \n    const newTodos = [...todos];\n    newTodos.splice(todoIndex, 1);\n    saveTodos(newTodos);\n\n    setOpenModal(false);\n  };\n\n  const addTodo = () => {\n    if (createTodoValue.length <= 0) {\n      return;\n    }\n    const newTodos = [...todos];\n    const newTodo: Todo = {\n      text: createTodoValue,\n      completed: false,\n    };\n    newTodos.push(newTodo);\n\n    saveTodos(newTodos);\n    setTodoValue(\"\");\n  };\n\n  const [openModal, setOpenModal] = useState(false);\n\n  const [todoForDelete, setTodoForDelete] = useState(\"\");\n\n  const verificationDelete = (text: string) => {\n    setOpenModal(true);\n    setTodoForDelete(text);\n  }\n\n\n  const context: TodoContextInterface = {\n    createTodoValue,\n    setTodoValue,\n    addTodo,\n    completedTodos,\n    totalTodos,\n    searchValue,\n    setSearchValue,\n    toogleFilterComplete,\n    filterComplete,\n    todosFiltered,\n    completeTodos,\n    deleteTodos,\n    openModal,\n    setOpenModal,\n    verificationDelete,\n    todoForDelete\n  }\n\n\n  \n  return (\n    <TodoContext.Provider value={context}>\n      {props.children}\n    </TodoContext.Provider>\n  );\n}\n\nexport { TodoContext, TodoProvider };","import { useState } from \"react\";\n\nexport function useLocalStorage<A>(\n  itemName: string,\n  initialState: A\n): [A, (newItems: A) => void] {\n  const localStorageItem = localStorage.getItem(itemName);\n  let parsedItems: A;\n\n  if (!localStorageItem) {\n    localStorage.setItem(itemName, JSON.stringify([]));\n    parsedItems = initialState;\n  } else {\n    parsedItems = JSON.parse(localStorageItem);\n  }\n\n  const [items, setItems] = useState(parsedItems);\n\n  const saveItems = (newItems: A) => {\n    setItems(newItems);\n\n    const stringifiedItems = JSON.stringify(newItems);\n    localStorage.setItem(itemName, stringifiedItems);\n  };\n\n  return [items, saveItems];\n}\n","import { useContext } from \"react\";\nimport { TodoContext } from \"../context/todoContext\";\n\nfunction useTodoContext() {\n  const todoContext = useContext(TodoContext);\n  \n  if(todoContext === null) throw new Error('Todo need a context');\n\n  return todoContext;\n}\n\nexport { useTodoContext };","import { useTodoContext } from \"../hooks/useTodoContext\";\n\nexport default function CreateTodoButton() {\n  const {addTodo} = useTodoContext();\n\n  return (\n    <button onClick={addTodo} className=\"button\">Create Task</button>\n  );\n}\n","import { useTodoContext } from \"../hooks/useTodoContext\";\n\nexport default function TodoCounter() {\n  const { completedTodos, totalTodos } = useTodoContext();\n\n  return (\n    <h2 className=\"subtitle\">Completed {completedTodos} to {totalTodos} tasks</h2>\n  );\n}\n","import { useTodoContext } from \"../hooks/useTodoContext\";\nimport { Todo } from \"../types\";\n\ntype TodoItemProps = {\n  item: Todo,\n  onComplete: (text: string) => void\n  onDelete: (text: string) => void\n}\n\nexport default function TodoItem({item, onComplete, onDelete}: TodoItemProps) {\n  \n  const { verificationDelete } = useTodoContext();\n\n  return (\n    <li className={item.completed ?\"completed\" :\"\"} >\n      <button onClick={() => onComplete(item.text)} className={`checkbox`}>{item.completed ?\"✔\" :\"\"}</button>\n      <p>{item.text}</p>\n      <button onClick={() => verificationDelete(item.text)} className=\"delete\">X</button>\n    </li>\n  );\n}\n","import { ReactNode } from \"react\";\nimport { useTodoContext } from \"../hooks/useTodoContext\";\nimport TodoItem from \"./TodoItem\";\n\ntype TodoListProps = {\n  children?: ReactNode\n};\n\nfunction TodoList({children}: TodoListProps) {\n  const {completeTodos, todosFiltered, deleteTodos} = useTodoContext();\n\n  return (\n    <section>\n      {children}\n      <ul>\n        {todosFiltered.map(item => (\n          <TodoItem \n            key={item.text} \n            item={item} \n            onComplete={completeTodos} \n            onDelete={deleteTodos} \n          />\n        ))}\n      </ul>  \n    </section>\n  );\n}\n\n\nexport default TodoList;","import { ChangeEvent } from \"react\";\nimport { useTodoContext } from \"../hooks/useTodoContext\";\n\nexport default function TodoSearch() {\n  \n  const { \n    searchValue, \n    setSearchValue, \n    toogleFilterComplete, \n    filterComplete \n  } = useTodoContext()\n\n  const onSearchValueChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchValue(event.target.value)\n  }\n\n  return (\n    <div>\n      <input\n      value={searchValue} \n      onChange={onSearchValueChange} \n      className=\"inputSearch\" \n      placeholder={\"Search task\"} />\n      <button onClick={toogleFilterComplete} className=\"buttonSearch\">{filterComplete ? \"🙈\" : \"🙉\"}</button>\n    </div>\n  );\n}","import { ChangeEvent } from \"react\";\nimport { useTodoContext } from \"../hooks/useTodoContext\";\n\nexport default function CreateTodoInput() {\n\n  const { createTodoValue, setTodoValue } = useTodoContext();\n\n  const onInputValueChange = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    setTodoValue(event.target.value)\n  }\n\n  return (\n    <div className=\"CreateTodoInput\">\n      <label>New Task</label>\n      <textarea onChange={onInputValueChange} value={createTodoValue} placeholder=\"Name of the new task\" />\n    </div>\n  );\n}\n","import { ReactNode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport '../styles/Modal.css';\n\ntype ModalProps = {\n  children: ReactNode;\n};\n\nfunction Modal({ children }: ModalProps) {\n\n  const modalRoot = document.getElementById(\"modal\") as HTMLElement;\n\n  return ReactDOM.createPortal(\n    <div className=\"Modal\">\n      {children}\n    </div>,\n    modalRoot\n    );\n}\n\nexport default Modal;\n","import \"../styles/App.css\";\nimport taskImage from \"../static/image.svg\";\n\nimport CreateTodoButton from \"../components/CreateTodoButton\";\nimport TodoCounter from \"../components/TodoCounter\";\nimport TodoList from \"../components/TodoList\";\nimport TodoSearch from \"../components/TodoSearch\";\nimport CreateTodoInput from \"../components/CreateTodoInput\";\n\nimport Modal from \"../Modal\";\nimport { useTodoContext } from \"../hooks/useTodoContext\";\n\nfunction AppUI() {\n\n  const { openModal, setOpenModal, deleteTodos, todoForDelete } = useTodoContext();\n \n  return (\n    <div className=\"App\">\n      <div className=\"CreateTasksContainer\">\n        <h2 className=\"subtitle\">Create New Task</h2>\n        <CreateTodoInput />\n        <CreateTodoButton />\n        <img alt=\"blog note\" src={taskImage} />\n      </div>\n      <div className=\"TasksContainer\">\n        <h1 className=\"title\">Your Tasks</h1>\n        <TodoCounter />\n        <TodoSearch />\n        <TodoList />\n\n        {openModal && (\n          <Modal>\n            <h1>Are you sore to delete the task?</h1>\n            <p>{todoForDelete}</p>\n            <div className=\"inLineButtons\">\n              <button className=\"button\" onClick={() => deleteTodos()}>Yes</button>\n              <button className=\"button\" onClick={() => setOpenModal(!openModal)}>No</button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default AppUI;\n","import AppUI from \"./AppUI\";\nimport { TodoProvider } from '../context/todoContext';\n\nfunction App() {\n  \n  return (\n    <TodoProvider>\n      <AppUI />\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App/index';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}